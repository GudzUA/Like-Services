"use client";

import { useEffect, useMemo, useState } from "react";

type ServiceLite = { id: string; name: string };
type MasterType = "schedule" | "task";
type Subtype = { name: string; duration: number; price: number };
type TimeSlot = { start: string; end: string };

export default function AdminCreatePage() {
  // UI / network states
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  // ‚ù∂ –°–¢–ê–ù –î–õ–Ø –ú–ê–ô–°–¢–†–Ü–í ‚Äî —É —Ç–µ–±–µ –≤–∂–µ —î:
  const [masters, setMasters] = useState<{ id: string; name: string }[]>([]);
  const [mastersLoading, setMastersLoading] = useState(false);
  const [selectedMasterId, setSelectedMasterId] = useState("");

  // Services list
  const [services, setServices] = useState<ServiceLite[]>([]);
  const [servicesLoading, setServicesLoading] = useState(true);

  // Form state
  const [masterType, setMasterType] = useState<MasterType>("schedule");

  const [selectedServiceId, setSelectedServiceId] = useState("");
  const [serviceName, setServiceName] = useState("");

  const [master, setMaster] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
  });

  const [photoFile, setPhotoFile] = useState<File | null>(null);

  const [subtypes, setSubtypes] = useState<Subtype[]>([
    { name: "", duration: 30, price: 0 },
  ]);
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([
    { start: "", end: "" },
  ]);

  // Fetch services
  useEffect(() => {
    const load = async () => {
      try {
        setServicesLoading(true);
        const res = await fetch("/api/services", { cache: "no-store" });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data: ServiceLite[] = await res.json();
        setServices(Array.isArray(data) ? data : []);
      } catch (e: any) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤:", e);
        setErrorMsg("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥.");
        setServices([]);
      } finally {
        setServicesLoading(false);
      }
    };
    load();
  }, []);

  // –ü—ñ–¥—Ç—è–≥—É–≤–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—ñ–≤ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–æ—Å–ª—É–≥–∏ ‚Äî —É —Ç–µ–±–µ –≤–∂–µ —î:
  useEffect(() => {
    if (!selectedServiceId) {
      setMasters([]);
      setSelectedMasterId("");
      return;
    }
    (async () => {
      try {
        setMastersLoading(true);
        const res = await fetch(`/api/masters?serviceId=${selectedServiceId}`, { cache: "no-store" });
        const data = await res.json();
        setMasters(Array.isArray(data) ? data : []);
      } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤:", e);
        setMasters([]);
      } finally {
        setMastersLoading(false);
      }
    })();
  }, [selectedServiceId]);

  // Derived flags
  const canSubmit = useMemo(() => {
    const hasService = !!selectedServiceId || serviceName.trim().length > 0;
    const hasMasterName = master.name.trim().length > 0;
    const hasScheduleData =
      masterType === "task" ||
      (subtypes.length > 0 &&
        subtypes.every((s) => s.name.trim() && s.duration > 0 && s.price >= 0));
    return hasService && hasMasterName && hasScheduleData && !loading;
  }, [selectedServiceId, serviceName, master, subtypes, masterType, loading]);

  const uploadPhoto = async (): Promise<string | null> => {
    if (!photoFile) return null;
    const apiKey = process.env.NEXT_PUBLIC_IMGBB_API_KEY;
    if (!apiKey) {
      console.warn("–í—ñ–¥—Å—É—Ç–Ω—ñ–π NEXT_PUBLIC_IMGBB_API_KEY ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ.");
      return null;
    }
    const formData = new FormData();
    formData.append("image", photoFile);
    const res = await fetch(`https://api.imgbb.com/1/upload?key=${apiKey}`, {
      method: "POST",
      body: formData,
    });
    const data = await res.json();
    if (!data?.success) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ imgbb:", data);
      throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ");
    }
    return data.data?.url ?? null;
  };

  // ‚ûã –î–û–î–ê–ô –û–ë–†–û–ë–ù–ò–ö –î–õ–Ø –î–û–î–ê–í–ê–ù–ù–Ø –°–õ–û–¢–Ü–í –Ü–°–ù–£–Æ–ß–û–ú–£ –ú–ê–ô–°–¢–†–£ ‚Äî –†–Ø–î–û–ú –Ü–ó handleSubmit (–≤–∏—â–µ –∞–±–æ –Ω–∏–∂—á–µ, –Ω–µ–≤–∞–∂–ª–∏–≤–æ)
  const handleAddSlotsToExisting = async () => {
    if (!selectedMasterId) {
      setErrorMsg("–û–±–µ—Ä—ñ—Ç—å –º–∞–π—Å—Ç—Ä–∞.");
      return;
    }
    if (timeSlots.length === 0) {
      setErrorMsg("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–∞–π–º-—Å–ª–æ—Ç.");
      return;
    }
    setLoading(true);
    setErrorMsg(null);
    setSuccess(false);
    try {
      const payload = {
        slots: timeSlots
          .filter((t) => t.start && t.end)
          .map((t) => ({ start: t.start, end: t.end })),
      };

      const res = await fetch(`/api/masters/${selectedMasterId}/slots`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const data = await res.json();
      if (!res.ok || !data?.success) {
        throw new Error(data?.message || `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (HTTP ${res.status})`);
      }
      setSuccess(true);
    } catch (e: any) {
      setErrorMsg(e.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤.");
    } finally {
      setLoading(false);
    }
  };

  // ‚ûå –ú–û–î–ò–§–Ü–ö–£–ô handleSubmit: —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π —ñ—Å–Ω—É—é—á–∏–π –º–∞–π—Å—Ç–µ—Ä ‚Äî –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ, –∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ —Å–ª–æ—Ç–∏
  const handleSubmit = async () => {
    setErrorMsg(null);

    // –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ —ñ —Ü–µ —Ä–æ–∑–∫–ª–∞–¥ ‚Äî –¥–æ–¥–∞—î–º–æ —Å–ª–æ—Ç–∏ —Ç–∞ –≤–∏—Ö–æ–¥–∏–º–æ
    if (selectedMasterId && masterType === "schedule") {
      await handleAddSlotsToExisting();
      return;
    }

    // ‚Äî‚Äî‚Äî –Ω–∏–∂—á–µ –ª–∏—à–∞—î—Ç—å—Å—è —Ç–≤–æ—è –ø–æ—Ç–æ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏/–º–∞–π—Å—Ç—Ä–∞ ‚Äî‚Äî‚Äî
    if (!selectedServiceId && !serviceName.trim()) {
      setErrorMsg("–í–∫–∞–∂—ñ—Ç—å –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É.");
      return;
    }
    if (!master.name.trim()) {
      setErrorMsg("–í–∫–∞–∂—ñ—Ç—å —ñ–º º—è –º–∞–π—Å—Ç—Ä–∞.");
      return;
    }
    if (masterType === "schedule") {
      if (
        subtypes.length === 0 ||
        !subtypes.every((s) => s.name.trim() && s.duration > 0 && s.price >= 0)
      ) {
        setErrorMsg("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥—Ç–∏–ø–∏: –Ω–∞–∑–≤–∞/—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å/—Ü—ñ–Ω–∞.");
        return;
      }
    }

    setLoading(true);
    setSuccess(false);

    try {
      const photoUrl = await uploadPhoto().catch((e) => {
        console.warn(e);
        return null;
      });

      const payload: any = {
        service: selectedServiceId
          ? { id: selectedServiceId }
          : { name: serviceName.trim(), type: masterType },
        master,
        masterType,
        photoUrl,
      };

      if (masterType === "schedule") {
        payload.subtypes = subtypes;
        payload.timeSlots = timeSlots;
      }

      const res = await fetch("/api/admin/create-all", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const data = await res.json();
      if (!res.ok || !data?.success) {
        throw new Error(data?.message || `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (HTTP ${res.status})`);
      }

      setSuccess(true);
      setTimeout(() => {
        window.location.reload();
      }, 1200);
    } catch (e: any) {
      console.error(e);
      setErrorMsg(e.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[#fdf8f3] py-10 px-4">
      <div className="max-w-2xl mx-auto bg-white shadow-lg rounded-xl p-6 space-y-6">
        <h1 className="text-2xl font-bold text-center">–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞–π—Å—Ç—Ä–∞</h1>

        {/* –ü–æ—Å–ª—É–≥–∞ */}
        <div className="space-y-2">
          <label className="block font-medium">‚úÇÔ∏è –ü–æ—Å–ª—É–≥–∞</label>
          <select
            className="w-full border rounded px-3 py-2"
            value={selectedServiceId}
            onChange={(e) => setSelectedServiceId(e.target.value)}
          >
            <option value="">
              {servicesLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "‚ûï –ù–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞"}
            </option>
            {!servicesLoading &&
              services.map((s) => (
                <option key={s.id} value={s.id}>
                  {s.name}
                </option>
              ))}
          </select>

          {!selectedServiceId && (
            <input
              value={serviceName}
              onChange={(e) => setServiceName(e.target.value)}
              placeholder="–ù–∞–∑–≤–∞ –Ω–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏"
              className="w-full border rounded px-3 py-2"
            />
          )}
        </div>

        {/* ‚ûç –í–°–¢–ê–í –°–ï–õ–ï–ö–¢–û–† –Ü–°–ù–£–Æ–ß–û–ì–û –ú–ê–ô–°–¢–†–ê ‚Äî –û–î–†–ê–ó–£ –ü–Ü–°–õ–Ø –ë–õ–û–ö–£ ¬´–ü–æ—Å–ª—É–≥–∞¬ª */}
        {selectedServiceId && (
          <div className="space-y-2">
            <label className="block font-medium">üë• –Ü—Å–Ω—É—é—á—ñ –º–∞–π—Å—Ç—Ä–∏ —Ü—ñ—î—ó –ø–æ—Å–ª—É–≥–∏</label>
            <select
              className="w-full border rounded px-3 py-2"
              value={selectedMasterId}
              onChange={(e) => setSelectedMasterId(e.target.value)}
            >
              <option value="">
                {mastersLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "‚Äî –û–±–µ—Ä—ñ—Ç—å –º–∞–π—Å—Ç—Ä–∞ ‚Äî"}
              </option>
              {!mastersLoading &&
                masters.map((m) => (
                  <option key={m.id} value={m.id}>{m.name}</option>
                ))}
            </select>
            {selectedMasterId && (
              <p className="text-sm text-gray-600">
                –û–±—Ä–∞–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ ‚Äî –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—Ç–∏ –π–æ–º—É —Å–ª–æ—Ç–∏.
              </p>
            )}
          </div>
        )}

        {/* –¢–∏–ø –º–∞–π—Å—Ç—Ä–∞ */}
        <div className="space-y-2">
          <label className="block font-medium">üîß –¢–∏–ø –º–∞–π—Å—Ç—Ä–∞</label>
          <select
            className="w-full border rounded px-3 py-2"
            value={masterType}
            onChange={(e) => setMasterType(e.target.value as MasterType)}
          >
            <option value="schedule">–ó —Ä–æ–∑–∫–ª–∞–¥–æ–º</option>
            <option value="task">–ù–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ)</option>
          </select>
        </div>

        {/* –ú–∞–π—Å—Ç–µ—Ä */}
        <div className="space-y-2">
          <label className="block font-medium">üë§ –ú–∞–π—Å—Ç–µ—Ä</label>
          <input
            value={master.name}
            onChange={(e) => setMaster({ ...master, name: e.target.value })}
            placeholder="–Ü–º º—è *"
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="file"
            accept="image/*"
            onChange={(e) => setPhotoFile(e.target.files?.[0] || null)}
            className="w-full border rounded px-3 py-2"
          />
          <input
            value={master.address}
            onChange={(e) => setMaster({ ...master, address: e.target.value })}
            placeholder="–ê–¥—Ä–µ—Å–∞"
            className="w-full border rounded px-3 py-2"
          />
          <input
            value={master.email}
            onChange={(e) => setMaster({ ...master, email: e.target.value })}
            placeholder="Email"
            className="w-full border rounded px-3 py-2"
          />
          <input
            value={master.phone}
            onChange={(e) => setMaster({ ...master, phone: e.target.value })}
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            className="w-full border rounded px-3 py-2"
          />
        </div>

        {/* –ü—ñ–¥—Ç–∏–ø–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è schedule) */}
        {masterType === "schedule" && (
          <div className="space-y-4">
            <label className="block font-medium">üßæ –ü—ñ–¥—Ç–∏–ø–∏ –ø–æ—Å–ª—É–≥</label>
            {subtypes.map((s, i) => (
              <div key={i} className="grid grid-cols-1 md:grid-cols-3 gap-2">
                <input
                  placeholder="–ù–∞–∑–≤–∞"
                  value={s.name}
                  onChange={(e) =>
                    setSubtypes(
                      subtypes.map((el, idx) =>
                        idx === i ? { ...el, name: e.target.value } : el
                      )
                    )
                  }
                  className="border rounded px-2 py-1"
                />
                <input
                  type="number"
                  placeholder="–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Ö–≤)"
                  value={s.duration}
                  onChange={(e) =>
                    setSubtypes(
                      subtypes.map((el, idx) =>
                        idx === i ? { ...el, duration: +e.target.value } : el
                      )
                    )
                  }
                  className="border rounded px-2 py-1"
                  min={1}
                />
                <input
                  type="number"
                  placeholder="–¶—ñ–Ω–∞"
                  value={s.price}
                  onChange={(e) =>
                    setSubtypes(
                      subtypes.map((el, idx) =>
                        idx === i ? { ...el, price: +e.target.value } : el
                      )
                    )
                  }
                  className="border rounded px-2 py-1"
                  min={0}
                />
              </div>
            ))}
            <div className="flex gap-4">
              <button
                type="button"
                onClick={() =>
                  setSubtypes([...subtypes, { name: "", duration: 30, price: 0 }])
                }
                className="text-blue-600 hover:underline"
              >
                ‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç–∏–ø
              </button>
              {subtypes.length > 1 && (
                <button
                  type="button"
                  onClick={() => setSubtypes(subtypes.slice(0, -1))}
                  className="text-red-600 hover:underline"
                >
                  ‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
                </button>
              )}
            </div>
          </div>
        )}

        {/* –¢–∞–π–º—Å–ª–æ—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è schedule) */}
        {masterType === "schedule" && (
          <div className="space-y-4">
            <label className="block font-medium">üïí –¢–∞–π–º—Å–ª–æ—Ç–∏</label>
            {timeSlots.map((t, i) => (
              <div key={i} className="grid grid-cols-1 md:grid-cols-2 gap-2">
                <input
                  type="datetime-local"
                  value={t.start}
                  onChange={(e) =>
                    setTimeSlots(
                      timeSlots.map((el, idx) =>
                        idx === i ? { ...el, start: e.target.value } : el
                      )
                    )
                  }
                  className="border rounded px-2 py-1"
                />
                <input
                  type="datetime-local"
                  value={t.end}
                  onChange={(e) =>
                    setTimeSlots(
                      timeSlots.map((el, idx) =>
                        idx === i ? { ...el, end: e.target.value } : el
                      )
                    )
                  }
                  className="border rounded px-2 py-1"
                />
              </div>
            ))}
            <div className="flex gap-4">
              <button
                type="button"
                onClick={() => setTimeSlots([...timeSlots, { start: "", end: "" }])}
                className="text-blue-600 hover:underline"
              >
                ‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ—Ç
              </button>
              {timeSlots.length > 1 && (
                <button
                  type="button"
                  onClick={() => setTimeSlots(timeSlots.slice(0, -1))}
                  className="text-red-600 hover:underline"
                >
                  ‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
                </button>
              )}
            </div>

            {/* –ö–ù–û–ü–ö–ê –î–û–î–ê–¢–ò –°–õ–û–¢–ò –Ü–°–ù–£–Æ–ß–û–ú–£ –ú–ê–ô–°–¢–†–£ ‚Äî –ü–Ü–î –ë–õ–û–ö–û–ú –¢–ê–ô–ú–°–õ–û–¢–Ü–í */}
            {selectedMasterId && (
              <button
                type="button"
                onClick={handleAddSlotsToExisting}
                className="w-full bg-emerald-600 text-white py-2 rounded hover:bg-emerald-700 transition"
                disabled={loading}
              >
                ‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ—Ç–∏ –≤–∏–±—Ä–∞–Ω–æ–º—É –º–∞–π—Å—Ç—Ä—É
              </button>
            )}
          </div>
        )}

        {/* –ü–æ–º–∏–ª–∫–∏ / –°—Ç–∞—Ç—É—Å–∏ */}
        {errorMsg && (
          <div className="text-red-600 text-sm bg-red-50 border border-red-200 rounded p-2">
            {errorMsg}
          </div>
        )}
        {success && (
          <p className="text-green-600 font-medium text-center">
            ‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!
          </p>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–æ–≤–∏–π –º–∞–π—Å—Ç–µ—Ä) */}
        <button
          onClick={handleSubmit}
          disabled={!canSubmit}
          className={`w-full text-white py-2 rounded transition ${
            canSubmit ? "bg-blue-600 hover:bg-blue-700" : "bg-gray-400 cursor-not-allowed"
          }`}
        >
          {loading ? "–ó–±–µ—Ä—ñ–≥–∞—î–º–æ..." : "‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏"}
        </button>
      </div>
    </div>
  );
}
